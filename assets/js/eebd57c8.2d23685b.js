"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2090],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3376:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={},s="Receive and respond to a call",i={unversionedId:"getting_started/receive_and_respond_to_a_call",id:"getting_started/receive_and_respond_to_a_call",title:"Receive and respond to a call",description:"Fonoster can accept calls from different sources such as phones, web pages, and mobile devices, with the ability to connect them with your Programmable Voice Application using a webhook.",source:"@site/docs/getting_started/receive_and_respond_to_a_call.md",sourceDirName:"getting_started",slug:"/getting_started/receive_and_respond_to_a_call",permalink:"/docs/getting_started/receive_and_respond_to_a_call",draft:!1,editUrl:"https://github.com/fonoster/website/edit/develop/docs/docs/getting_started/receive_and_respond_to_a_call.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Configure a Number",permalink:"/docs/getting_started/configure_a_number"},next:{title:"Make an outbound call",permalink:"/docs/getting_started/make_an_outbound_call"}},c={},l=[],p={toc:l};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"receive-and-respond-to-a-call"},"Receive and respond to a call"),(0,o.kt)("p",null,"Fonoster can accept calls from different sources such as phones, web pages, and mobile devices, with the ability to ",(0,o.kt)("strong",{parentName:"p"},"connect them with your Programmable Voice Application")," using a webhook."),(0,o.kt)("p",null,"When your Fonoster Number receives an incoming phone call, it will send an HTTP request to a server you control. ",(0,o.kt)("strong",{parentName:"p"},"This callback mechanism is known as a webhook.")," "),(0,o.kt)("p",null,"When the request is made from Fonoster to your application, ",(0,o.kt)("strong",{parentName:"p"},"Fonoster expects a response in a JSON format")," that tells it how its goint to respond to the call."),(0,o.kt)("p",null,"If everything went well with the prior guides, all is left is calling to your Number using a mobile or landline. "),(0,o.kt)("p",null,"Initialize your app"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-none"},"node index.js\n")),(0,o.kt)("p",null,"And your output should look similar to this, where every empty value (' ') is replaced by your previous configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-none"},"{\naccessKeyId: 'PJ prefix',\nsessionToken: ' ',\ndialbackEndpoint: 'https://api.fonoster.io',\nsessionId: '',\nnumber: '',\ncallerId: 'WIRELESS CALLER',\ncallerNumber: '',\nselfEndpoint: your ngrok address,\nmetadata: {}\n}\nverbose: @fonoster/voice sending answer request [sessionId = '']\nverbose: @fonoster/voice received event [{\n\"type\": \"SessionOpen\",\n\"sessionId\": ' ' \n}]\nverbose: @fonoster/voice received event[{\n\"type\": \"PlaybackFinished\",\n\"data\": {\n\"playbackId\": ''\n }\n}]\nverbose: @fonoster/voice sending hangup request [sessionId = ' ' ]\nverbose: @fonoster/voice received event [{\n\"type\": \"SessionClosed\",\n\"sessionId\": ''\n}]\n")))}d.isMDXComponent=!0}}]);